name: C++ style & tidy

on:
  push:
    branches-ignore: [ 'main' ]
    paths:
      - '**/*.cpp'
      - '.clang-tidy'
      - '.clang-format'
      - '.github/workflows/cpp-style.yml'
  pull_request:
    branches: [ 'main' ]
    paths:
      - '**/*.cpp'
      - '.clang-tidy'
      - '.clang-format'
      - '.github/workflows/cpp-style.yml'

jobs:
  style-lint:
    runs-on: ubuntu-latest
    env:
      DEBIAN_FRONTEND: noninteractive
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Determine branch name
        id: ref
        run: |
          REF="${GITHUB_HEAD_REF:-$GITHUB_REF_NAME}"
          echo "ref_name=$REF" >> $GITHUB_OUTPUT
          echo "Branch/PR head: $REF"

      - name: Enforce branch naming (<number><letter>)
        run: |
          REF="${{ steps.ref.outputs.ref_name }}"
          if ! [[ "$REF" =~ ^[0-9]+[A-Za-z]$ ]]; then
            echo "::error::Ветка должна называться <число><буква>, например: 1A, 12b. Сейчас: $REF"
            exit 1
          fi

      - name: Cache clang tools
        uses: awalsh128/cache-apt-pkgs-action@v1
        with:
          packages: "clang-format clang-tidy"
          version: 1

      - name: Resolve tool paths
        run: |
          CF=$(command -v clang-format || command -v clang-format-18 || command -v clang-format-17 || command -v clang-format-16 || command -v clang-format-15 || command -v clang-format-14)
          CT=$(command -v clang-tidy   || command -v clang-tidy-18   || command -v clang-tidy-17   || command -v clang-tidy-16   || command -v clang-tidy-15   || command -v clang-tidy-14)
          echo "CLANG_FORMAT=$CF" >> $GITHUB_ENV
          echo "CLANG_TIDY=$CT"   >> $GITHUB_ENV
          "$CF" --version
          "$CT" --version

      - name: Verify task structure and target file
        id: collect
        shell: bash
        run: |
          set -e
          REF="${{ steps.ref.outputs.ref_name }}"
          if [ ! -d "./$REF" ]; then
            echo "::error::Ожидается папка './$REF/'."
            exit 1
          fi
          if [ ! -f "./$REF/main.cpp" ]; then
            echo "::error::Не найден файл './$REF/main.cpp'."
            exit 1
          fi
          mapfile -d '' others < <(find . -type f -name '*.cpp' -not -path "./$REF/main.cpp" -print0)
          if [ ${#others[@]} -ne 0 ]; then
            echo "::error::Найдены лишние .cpp кроме './$REF/main.cpp':"
            printf '%s\n' "${others[@]}"
            exit 1
          fi
          echo "./$REF/main.cpp" > target_cpp.txt

      - name: clang-format (fail on diff + print diff)
        id: format_check
        shell: bash
        continue-on-error: true
        run: |
          target="$(cat target_cpp.txt)"
          if [ -f .clang-format ]; then
            style_opt=""
          else
            style_opt="-style='{BasedOnStyle: Google, DerivePointerAlignment: false, PointerAlignment: Left, AlignOperands: true}'"
          fi
          "$CLANG_FORMAT" ${style_opt} -i "$target"
          if ! git diff --quiet --exit-code -- "$target"; then
            echo "Форматирование изменило файл: $target"
            git diff -- "$target" > clang-format.patch

            # Показать diff прямо в логах (урезаем, если огромный)
            echo "::group::clang-format diff"
            git --no-pager diff --unified=0 -- "$target" > cf.diff
            LINES=$(wc -l < cf.diff)
            if [ "$LINES" -le 2000 ]; then
              cat cf.diff
            else
              echo "(diff длиннее 2000 строк; печатаю начало и конец)"
              head -n 1000 cf.diff
              echo "----- [truncated] -----"
              tail -n 1000 cf.diff
            fi
            echo "::endgroup::"

            exit 1
          fi

      - name: Upload clang-format patch
        if: ${{ steps.format_check.outcome == 'failure' }}
        uses: actions/upload-artifact@v4
        with:
          name: clang-format.patch
          path: clang-format.patch

      - name: clang-tidy (WarningsAsErrors)
        id: tidy_check
        shell: bash
        continue-on-error: true
        run: |
          target="$(cat target_cpp.txt)"
          if ! "$CLANG_TIDY" -quiet -extra-arg=-std=c++20 "$target" --; then
            echo "::error::clang-tidy нашёл замечания (считаются ошибками)."
            exit 1
          fi

      - name: Fail if any check failed
        if: ${{ steps.format_check.outcome == 'failure' || steps.tidy_check.outcome == 'failure' }}
        run: exit 1
